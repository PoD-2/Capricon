{"ast":null,"code":"// import config from 'config';\nconst baseURL = \"http://localhost:8080\";\nexport const userService = {\n  login,\n  logout,\n  register\n};\n\nfunction login(user, remember) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'http://localhost:8080',\n      'Access-Control-Allow-Credentials': 'true'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${baseURL}/login`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    if (remember) {\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction register(user, remember) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'http://localhost:8080',\n      'Access-Control-Allow-Credentials': 'true'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${baseURL}/register`, requestOptions).then(handleResponse).then(user => {\n    if (remember) {\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/services/user.service.js"],"names":["baseURL","userService","login","logout","register","user","remember","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","localStorage","setItem","removeItem","response","text","data","parse","ok","status","window","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA;AAEA,MAAMA,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,IAAf,EAAqBC,QAArB,EAA+B;AAC3B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsC,qCAA+B,uBAArE;AAA8F,0CAAoC;AAAlI,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAHa,GAAvB;AAMA,SAAOQ,KAAK,CAAE,GAAEb,OAAQ,QAAZ,EAAqBO,cAArB,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEGT,IAAI,IAAI;AAEV;AACA,QAAGC,QAAH,EAAY;AACRU,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACC,SAAL,CAAeP,IAAf,CAA7B;AACH;;AAED,WAAOA,IAAP;AACH,GAVE,CAAP;AAWH;;AAED,SAASF,MAAT,GAAkB;AACd;AACAa,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAGD,SAASd,QAAT,CAAkBC,IAAlB,EAAwBC,QAAxB,EAAkC;AAC9B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsC,qCAA+B,uBAArE;AAA8F,0CAAoC;AAAlI,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAHa,GAAvB;AAMA,SAAOQ,KAAK,CAAE,GAAEb,OAAQ,WAAZ,EAAwBO,cAAxB,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEGT,IAAI,IAAI;AACV,QAAGC,QAAH,EAAY;AACRU,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACC,SAAL,CAAeP,IAAf,CAA7B;AACH;;AACD,WAAOA,IAAP;AACH,GAPE,CAAP;AAQH;;AAGD,SAASU,cAAT,CAAwBI,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBN,IAAhB,CAAqBM,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIT,IAAI,CAACW,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AAEd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACArB,QAAAA,MAAM;AACNsB,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;;AAED,YAAMC,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BV,QAAQ,CAACW,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOP,IAAP;AACH,GAfM,CAAP;AAgBH","sourcesContent":["// import config from 'config';\n\nconst baseURL = \"http://localhost:8080\"\n\nexport const userService = {\n    login,\n    logout,\n    register\n};\n\nfunction login(user, remember) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:8080', 'Access-Control-Allow-Credentials': 'true'},\n        body: JSON.stringify(user) \n    };\n\n    return fetch(`${baseURL}/login`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            \n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            if(remember){\n                localStorage.setItem('user', JSON.stringify(user));\n            }   \n                 \n            return user;\n        })\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\n\nfunction register(user, remember) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:8080', 'Access-Control-Allow-Credentials': 'true' },\n        body: JSON.stringify(user) \n    };\n\n    return fetch(`${baseURL}/register`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            if(remember){\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n            return user;\n        })\n}\n\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            \n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                window.location.reload();\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}