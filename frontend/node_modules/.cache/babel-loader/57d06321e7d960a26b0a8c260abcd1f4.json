{"ast":null,"code":"import { sellerAuthConstants } from '../constants';\nimport { sellerAuthService } from '../../services';\nimport { alertActions } from '.';\nexport const sellerAuthActions = {\n  login,\n  logout,\n  register\n};\n\nfunction login(seller, remember, history) {\n  return dispatch => {\n    dispatch(request());\n    sellerAuthService.login(seller, remember).then(seller => {\n      dispatch(success(seller));\n      history.push('/seller/dashboard');\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: sellerAuthConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: sellerAuthConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerAuthConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  sellerAuthService.logout();\n  return {\n    type: sellerAuthConstants.LOGOUT\n  };\n}\n\nfunction register(seller, remember, history) {\n  return dispatch => {\n    dispatch(request());\n    sellerAuthService.register(seller, remember).then(seller => {\n      dispatch(success(seller));\n      history.push('/seller/dashboard');\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: sellerAuthConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: sellerAuthConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerAuthConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/redux/actions/seller.auth.actions.js"],"names":["sellerAuthConstants","sellerAuthService","alertActions","sellerAuthActions","login","logout","register","seller","remember","history","dispatch","request","then","success","push","error","failure","toString","user","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"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","sourcesContent":["import { sellerAuthConstants } from '../constants';\nimport { sellerAuthService } from '../../services';\nimport { alertActions } from '.';\n\nexport const sellerAuthActions = {\n    login,\n    logout,\n    register\n};\n\nfunction login(seller, remember, history) {\n    return dispatch => {\n        dispatch(request()); \n\n        sellerAuthService.login(seller, remember)\n            .then(\n                seller => { \n                        dispatch(success(seller));\n                        history.push('/seller/dashboard');\n                   \n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: sellerAuthConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: sellerAuthConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: sellerAuthConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    sellerAuthService.logout();\n    return { type: sellerAuthConstants.LOGOUT };\n}\n\nfunction register(seller, remember, history) {\n    return dispatch => {\n        dispatch(request());\n\n        sellerAuthService.register(seller,remember)\n            .then(\n                seller => { \n                    dispatch(success(seller));\n                    history.push('/seller/dashboard');\n\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: sellerAuthConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: sellerAuthConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: sellerAuthConstants.REGISTER_FAILURE, error } }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}