{"ast":null,"code":"// import config from 'config';\nconst baseURL = \"http://localhost:8080\";\nexport const userService = {\n  login,\n  logout,\n  register\n};\n\nfunction login(email, password, remember) {\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'http://localhost:8080',\n      'Access-Control-Allow-Credentials': 'true'\n    }\n  };\n  return fetch(`${baseURL}/login?email=${email}&pass=${password}`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    if (user.name !== null && remember) {\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction register(user, remember) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'http://localhost:8080',\n      'Access-Control-Allow-Credentials': 'true'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`${baseURL}/register?name=${user.name}&phone=${user.mobileNumber}&emailId=${user.email}&password=${user.password}`, requestOptions).then(handleResponse).then(res => {\n    if (res === \"success\" && remember) {\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return res;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    console.log(\"userService\" + data);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/services/user.service.js"],"names":["baseURL","userService","login","logout","register","email","password","remember","requestOptions","method","headers","fetch","then","handleResponse","user","name","localStorage","setItem","JSON","stringify","removeItem","body","mobileNumber","res","response","text","data","parse","console","log","ok","status","window","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA;AAEA,MAAMA,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,SAASF,KAAT,CAAeG,KAAf,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AACtC,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsC,qCAA+B,uBAArE;AAA8F,0CAAoC;AAAlI;AAFU,GAAvB;AAKA,SAAOC,KAAK,CAAE,GAAEX,OAAQ,gBAAeK,KAAM,SAAQC,QAAS,EAAlD,EAAqDE,cAArD,CAAL,CACFI,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AAEV;AACA,QAAGA,IAAI,CAACC,IAAL,KAAc,IAAd,IAAsBR,QAAzB,EAAkC;AAC9BS,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA7B;AACH;;AAED,WAAOA,IAAP;AACH,GAVE,CAAP;AAWH;;AAED,SAASX,MAAT,GAAkB;AACd;AACAa,EAAAA,YAAY,CAACI,UAAb,CAAwB,MAAxB;AACH;;AAGD,SAAShB,QAAT,CAAkBU,IAAlB,EAAwBP,QAAxB,EAAkC;AAC9B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsC,qCAA+B,uBAArE;AAA8F,0CAAoC;AAAlI,KAFU;AAGnBW,IAAAA,IAAI,EAAEH,IAAI,CAACC,SAAL,CAAeL,IAAf;AAHa,GAAvB;AAMA,SAAOH,KAAK,CAAE,GAAEX,OAAQ,kBAAiBc,IAAI,CAACC,IAAK,UAASD,IAAI,CAACQ,YAAa,YAAWR,IAAI,CAACT,KAAM,aAAYS,IAAI,CAACR,QAAS,EAAlH,EAAqHE,cAArH,CAAL,CACFI,IADE,CACGC,cADH,EAEFD,IAFE,CAEGW,GAAG,IAAI;AACT,QAAGA,GAAG,KAAK,SAAR,IAAqBhB,QAAxB,EAAiC;AAC7BS,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA7B;AACH;;AACD,WAAOS,GAAP;AACH,GAPE,CAAP;AAQH;;AAGD,SAASV,cAAT,CAAwBW,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBb,IAAhB,CAAqBa,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIP,IAAI,CAACS,KAAL,CAAWF,IAAX,CAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBH,IAA5B;;AACA,QAAI,CAACF,QAAQ,CAACM,EAAd,EAAkB;AAEd,UAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACA5B,QAAAA,MAAM;AACN6B,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;;AAED,YAAMC,KAAK,GAAIT,IAAI,IAAIA,IAAI,CAACU,OAAd,IAA0BZ,QAAQ,CAACa,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOT,IAAP;AACH,GAhBM,CAAP;AAiBH","sourcesContent":["// import config from 'config';\n\nconst baseURL = \"http://localhost:8080\"\n\nexport const userService = {\n    login,\n    logout,\n    register\n};\n\nfunction login(email, password, remember) {\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:8080', 'Access-Control-Allow-Credentials': 'true'}\n    };\n\n    return fetch(`${baseURL}/login?email=${email}&pass=${password}`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            \n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            if(user.name !== null && remember){\n                localStorage.setItem('user', JSON.stringify(user));\n            }   \n                 \n            return user;\n        })\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\n\nfunction register(user, remember) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:8080', 'Access-Control-Allow-Credentials': 'true' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch(`${baseURL}/register?name=${user.name}&phone=${user.mobileNumber}&emailId=${user.email}&password=${user.password}`, requestOptions)\n        .then(handleResponse)\n        .then(res => {\n            if(res === \"success\" && remember){\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n            return res;\n        })\n}\n\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        console.log(\"userService\" + data);\n        if (!response.ok) {\n            \n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                window.location.reload();\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}