{"ast":null,"code":"import { userConstants } from '../constants';\nimport { userService } from '../../services/';\nimport { alertActions } from './';\nimport { history } from '../../helpers/history';\nexport const userActions = {\n  login,\n  logout,\n  register\n};\n\nfunction login(email, password, remember) {\n  return dispatch => {\n    dispatch(request({\n      email\n    }));\n    userService.login(email, password, remember).then(user => {\n      if (user.name !== null) {\n        dispatch(success(user));\n        history.push('/');\n      } else {\n        dispatch(failure(\"user does not exist\"));\n        dispatch(alertActions.error(\"user does not exist\"));\n      }\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(user, remember) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user, remember).then(res => {\n      console.log(\"IMPORTANT\" + res);\n\n      if (res.status === \"success\") {\n        dispatch(alertActions.success('Registration successful'));\n        dispatch(success(user));\n        history.push('/');\n      } else {\n        dispatch(failure(\"user already exist\"));\n        dispatch(alertActions.error(\"user already exist\"));\n      }\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/redux/actions/user.actions.js"],"names":["userConstants","userService","alertActions","history","userActions","login","logout","register","email","password","remember","dispatch","request","then","user","name","success","push","failure","error","toString","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","res","console","log","status","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from '../constants';\nimport { userService } from '../../services/';\nimport { alertActions } from './';\nimport { history } from '../../helpers/history';\n\nexport const userActions = {\n    login,\n    logout,\n    register\n};\n\nfunction login(email, password, remember) {\n    return dispatch => {\n        dispatch(request({ email })); \n\n        userService.login(email, password, remember)\n            .then(\n                user => { \n\n                    if(user.name !== null){\n                        dispatch(success(user));\n                        history.push('/');\n                    } else {\n                        dispatch(failure(\"user does not exist\"));\n                        dispatch(alertActions.error(\"user does not exist\"));\n                    }\n                   \n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    userService.logout();\n    return { type: userConstants.LOGOUT };\n}\n\nfunction register(user, remember) {\n    return dispatch => {\n        dispatch(request(user));\n\n        userService.register(user,remember)\n            .then(\n                res => { \n                    console.log(\"IMPORTANT\" + res);\n                    if(res.status === \"success\"){\n                    dispatch(alertActions.success('Registration successful'));\n                    dispatch(success(user));\n                    history.push('/');\n                    } else {\n                        dispatch(failure(\"user already exist\"));\n                        dispatch(alertActions.error(\"user already exist\"));\n                    }\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n"]},"metadata":{},"sourceType":"module"}