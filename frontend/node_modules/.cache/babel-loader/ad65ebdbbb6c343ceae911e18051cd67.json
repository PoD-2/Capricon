{"ast":null,"code":"// import config from 'config';\nconst baseURL = \"http://localhost:8080\";\nexport const userService = {\n  login,\n  logout,\n  register\n};\n\nasync function login(user, remember) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'http://localhost:8080',\n      'Access-Control-Allow-Credentials': 'true'\n    },\n    body: JSON.stringify(user)\n  };\n  const response = await fetch(`${baseURL}/login`, requestOptions);\n  const user_1 = await handleResponse(response); // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n  if (remember) {\n    localStorage.setItem('user', JSON.stringify(user_1));\n  }\n\n  return user_1;\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nasync function register(user, remember) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'http://localhost:8080',\n      'Access-Control-Allow-Credentials': 'true'\n    },\n    body: JSON.stringify(user)\n  };\n  const response = await fetch(`${baseURL}/register`, requestOptions);\n  const user_1 = await handleResponse(response);\n\n  if (remember) {\n    localStorage.setItem('user', JSON.stringify(user_1));\n  }\n\n  return user_1;\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/services/user.service.js"],"names":["baseURL","userService","login","logout","register","user","remember","requestOptions","method","headers","body","JSON","stringify","response","fetch","user_1","handleResponse","localStorage","setItem","removeItem","text","then","data","parse","ok","status","window","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA;AAEA,MAAMA,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA;AAHuB,CAApB;;AAMP,eAAeF,KAAf,CAAqBG,IAArB,EAA2BC,QAA3B,EAAqC;AACjC,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsC,qCAA+B,uBAArE;AAA8F,0CAAoC;AAAlI,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAHa,GAAvB;AAMA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEd,OAAQ,QAAZ,EAAqBO,cAArB,CAA5B;AACA,QAAMQ,MAAM,GAAG,MAAMC,cAAc,CAACH,QAAD,CAAnC,CARiC,CASjC;;AACA,MAAIP,QAAJ,EAAc;AACVW,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BP,IAAI,CAACC,SAAL,CAAeG,MAAf,CAA7B;AACH;;AACD,SAAOA,MAAP;AACH;;AAED,SAASZ,MAAT,GAAkB;AACd;AACAc,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAGD,eAAef,QAAf,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACpC,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB,kBAAlB;AAAsC,qCAA+B,uBAArE;AAA8F,0CAAoC;AAAlI,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAHa,GAAvB;AAMA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEd,OAAQ,WAAZ,EAAwBO,cAAxB,CAA5B;AACA,QAAMQ,MAAM,GAAG,MAAMC,cAAc,CAACH,QAAD,CAAnC;;AACA,MAAIP,QAAJ,EAAc;AACVW,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BP,IAAI,CAACC,SAAL,CAAeG,MAAf,CAA7B;AACH;;AACD,SAAOA,MAAP;AACH;;AAGD,SAASC,cAAT,CAAwBH,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACO,IAAT,GAAgBC,IAAhB,CAAqBD,IAAI,IAAI;AAChC,UAAME,IAAI,GAAGF,IAAI,IAAIT,IAAI,CAACY,KAAL,CAAWH,IAAX,CAArB;;AACA,QAAI,CAACP,QAAQ,CAACW,EAAd,EAAkB;AAEd,UAAIX,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAtB,QAAAA,MAAM;AACNuB,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;;AAED,YAAMC,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BjB,QAAQ,CAACkB,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOP,IAAP;AACH,GAfM,CAAP;AAgBH","sourcesContent":["// import config from 'config';\n\nconst baseURL = \"http://localhost:8080\"\n\nexport const userService = {\n    login,\n    logout,\n    register\n};\n\nasync function login(user, remember) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:8080', 'Access-Control-Allow-Credentials': 'true'},\n        body: JSON.stringify(user) \n    };\n\n    const response = await fetch(`${baseURL}/login`, requestOptions);\n    const user_1 = await handleResponse(response);\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    if (remember) {\n        localStorage.setItem('user', JSON.stringify(user_1));\n    }\n    return user_1;\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\n\nasync function register(user, remember) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:8080', 'Access-Control-Allow-Credentials': 'true' },\n        body: JSON.stringify(user) \n    };\n\n    const response = await fetch(`${baseURL}/register`, requestOptions);\n    const user_1 = await handleResponse(response);\n    if (remember) {\n        localStorage.setItem('user', JSON.stringify(user_1));\n    }\n    return user_1;\n}\n\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            \n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                window.location.reload();\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"]},"metadata":{},"sourceType":"module"}