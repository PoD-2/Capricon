{"ast":null,"code":"var _jsxFileName = \"/Users/santhosh/myFiles/Capricon/src/pages/Checkout/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Accordion, Form, Card, Container, Col, Button } from 'react-bootstrap';\nimport NavBar from '../../components/NavBar';\nimport { formValidation as validate } from '../../services';\nimport PaymentForm from '../../components/PaymentForm';\nimport PaymentSuccessCard from '../../components/PaymentSuccessCard';\nimport PriceCard from '../../components/PriceCard';\nimport Footer from '../../components/Footer/Footer';\nimport './Checkout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Checkout() {\n  _s();\n\n  const [addressLine, setAddressLine] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [pincode, setPincode] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [addressValid, setAddressValid] = useState(false);\n  const [cvc, setCvc] = useState(\"\");\n  const [expiry, setExpiry] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [showModal, setShowModel] = useState(false); //form validation\n\n  function validateAddress() {\n    return validate.nameValidation(submitted, addressLine);\n  }\n\n  function validateCity() {\n    return validate.nameValidation(submitted, city);\n  }\n\n  function validateState() {\n    return validate.nameValidation(submitted, state);\n  }\n\n  function validateCountry() {\n    return validate.nameValidation(submitted, country);\n  }\n\n  function validatePinCode() {\n    return validate.zipcodeValidation(submitted, pincode);\n  }\n\n  function checkAllValidity() {\n    if (validateAddress() && validateCity() && validateState() && validateCountry() && validatePinCode()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleAddressSubmit(event) {\n    event.preventDefault();\n    setSubmitted(true);\n\n    if (checkAllValidity() && submitted) {\n      setAddressValid(true);\n    }\n  }\n\n  function handlePayment() {\n    setShowModel(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(PaymentSuccessCard, {\n        showModal: showModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3 mt-5 sellerPageTitle\",\n        children: \"CHECK OUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"LineSeperator mb-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PriceCard, {\n        totalPrice: 500,\n        className: \"mb-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        defaultActiveKey: \"0\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n            as: Button,\n            variant: \"secondary\",\n            className: \"text-left\",\n            eventKey: \"0\",\n            children: \"Delivery Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n            eventKey: \"0\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: handleAddressSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 8,\n                    controlId: \"formGridAddress\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Address line 1\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      autoFocus: true,\n                      type: \"text\",\n                      value: addressLine,\n                      placeholder: \"Your Address Line\",\n                      className: 'form-control' + (!validateAddress() && ' is-invalid'),\n                      onChange: e => setAddressLine(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 105,\n                      columnNumber: 45\n                    }, this), !validateAddress() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"Address is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 114,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridPinCode\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Pincode\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"Number\",\n                      value: pincode,\n                      placeholder: \"Your Pin code\",\n                      className: 'form-control' + (!validatePinCode() && ' is-invalid'),\n                      onChange: e => setPincode(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 120,\n                      columnNumber: 45\n                    }, this), !validatePinCode() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"Pincode is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 128,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridCityName\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"City\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      value: city,\n                      placeholder: \"City/Distrit/Town\",\n                      className: 'form-control' + (!validateCity() && ' is-invalid'),\n                      onChange: e => setCity(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 136,\n                      columnNumber: 45\n                    }, this), !validateCity() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"City name is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 144,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridStateName\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"State\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 149,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      value: state,\n                      placeholder: \"Your State. eg: Tamil Nadu\",\n                      className: 'form-control' + (!validateState() && ' is-invalid'),\n                      onChange: e => setState(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 45\n                    }, this), !validateState() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"State is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridCountryName\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Country\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 163,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      value: country,\n                      placeholder: \"Your Country. eg: India\",\n                      className: 'form-control' + (!validateCountry() && ' is-invalid'),\n                      onChange: e => setCountry(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 45\n                    }, this), !validateCountry() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"Country is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"dark\",\n                  disabled: addressValid ? true : false,\n                  children: \"Deliver Here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 37\n                }, this), addressValid && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-success mt-2\",\n                  children: \"Address Saved Successfully\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 54\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n            as: Button,\n            variant: \"secondary\",\n            disabled: addressValid ? false : true,\n            className: \"text-left\",\n            onClick: () => console.log(\"hii\"),\n            eventKey: \"1\",\n            children: \"Payment Options\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n            eventKey: \"1\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(PaymentForm, {\n                cvc: cvc,\n                setCvc: setCvc,\n                expiry: expiry,\n                setExpiry: setExpiry,\n                name: name,\n                setName: setName,\n                number: number,\n                setNumber: setNumber,\n                handlePayment: handlePayment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Checkout, \"Xsf3s+yndZhR3Tv3mq/k/dvkaII=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/pages/Checkout/Checkout.js"],"names":["React","useState","Accordion","Form","Card","Container","Col","Button","NavBar","formValidation","validate","PaymentForm","PaymentSuccessCard","PriceCard","Footer","Checkout","addressLine","setAddressLine","city","setCity","pincode","setPincode","state","setState","country","setCountry","submitted","setSubmitted","addressValid","setAddressValid","cvc","setCvc","expiry","setExpiry","name","setName","number","setNumber","showModal","setShowModel","validateAddress","nameValidation","validateCity","validateState","validateCountry","validatePinCode","zipcodeValidation","checkAllValidity","handleAddressSubmit","event","preventDefault","handlePayment","e","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Accordion, Form, Card, Container, Col, Button } from 'react-bootstrap'\nimport NavBar from '../../components/NavBar'\nimport { formValidation as validate } from '../../services';\nimport PaymentForm from '../../components/PaymentForm';\nimport PaymentSuccessCard from '../../components/PaymentSuccessCard';\nimport PriceCard from '../../components/PriceCard';\nimport Footer from '../../components/Footer/Footer';\nimport './Checkout.css'\n\nfunction Checkout() {\n\n\n    const [addressLine, setAddressLine] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [pincode, setPincode] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [submitted, setSubmitted] = useState(false);\n    const [addressValid, setAddressValid] = useState(false);\n    const [cvc, setCvc] = useState(\"\");\n    const [expiry, setExpiry] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [number, setNumber] = useState(\"\");\n    const [showModal, setShowModel] = useState(false);\n\n\n\n    //form validation\n\n    function validateAddress() {\n        return validate.nameValidation(submitted, addressLine);\n    }\n\n    function validateCity() {\n        return validate.nameValidation(submitted, city);\n    }\n\n    function validateState() {\n        return validate.nameValidation(submitted, state);\n    }\n\n    function validateCountry() {\n        return validate.nameValidation(submitted, country);\n    }\n\n    function validatePinCode() {\n        return validate.zipcodeValidation(submitted, pincode);\n    }\n\n\n    function checkAllValidity() {\n\n        if (validateAddress() && validateCity() && validateState() && validateCountry() && validatePinCode()) {\n            return true;\n        }\n\n        return false;\n\n    }\n\n    function handleAddressSubmit(event) {\n        event.preventDefault();\n        setSubmitted(true);\n\n        if (checkAllValidity() && submitted) {\n            setAddressValid(true);\n        }\n\n    }\n\n    function handlePayment() {\n        setShowModel(true);\n    }\n\n\n\n    return (\n        <>\n            <NavBar />\n            <Container>\n                <PaymentSuccessCard\n                    showModal={showModal}\n                />\n                <h3 className=\"mb-3 mt-5 sellerPageTitle\">CHECK OUT</h3>\n                <span className=\"LineSeperator mb-5\" />\n                {/* <p style={{fontSize: 34}}>Total amount to be paid: ₹500</p> */}\n                <PriceCard\n                    totalPrice={500}\n                    className=\"mb-5\"\n                />\n                <Accordion defaultActiveKey=\"0\">\n                    <Card>\n                        <Accordion.Toggle as={Button} variant=\"secondary\" className=\"text-left\" eventKey=\"0\">\n                            Delivery Address\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Form onSubmit={handleAddressSubmit}>\n\n                                    <Form.Row>\n\n                                        <Form.Group as={Col} md={8} controlId=\"formGridAddress\">\n                                            <Form.Label>Address line 1</Form.Label>\n                                            <Form.Control\n                                                autoFocus\n                                                type=\"text\"\n                                                value={addressLine}\n                                                placeholder=\"Your Address Line\"\n                                                className={'form-control' + (!validateAddress() && ' is-invalid')}\n                                                onChange={(e) => setAddressLine(e.target.value)}\n                                            />\n                                            {!validateAddress() &&\n                                                <div className=\"invalid-feedback\">Address is required</div>\n                                            }\n\n                                        </Form.Group>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridPinCode\">\n                                            <Form.Label>Pincode</Form.Label>\n                                            <Form.Control\n                                                type=\"Number\"\n                                                value={pincode}\n                                                placeholder=\"Your Pin code\"\n                                                className={'form-control' + (!validatePinCode() && ' is-invalid')}\n                                                onChange={(e) => setPincode(e.target.value)}\n                                            />\n                                            {!validatePinCode() &&\n                                                <div className=\"invalid-feedback\">Pincode is required</div>\n                                            }\n\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridCityName\">\n                                            <Form.Label>City</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={city}\n                                                placeholder=\"City/Distrit/Town\"\n                                                className={'form-control' + (!validateCity() && ' is-invalid')}\n                                                onChange={(e) => setCity(e.target.value)}\n                                            />\n                                            {!validateCity() &&\n                                                <div className=\"invalid-feedback\">City name is required</div>\n                                            }\n\n                                        </Form.Group>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridStateName\">\n                                            <Form.Label>State</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={state}\n                                                placeholder=\"Your State. eg: Tamil Nadu\"\n                                                className={'form-control' + (!validateState() && ' is-invalid')}\n                                                onChange={(e) => setState(e.target.value)}\n                                            />\n                                            {!validateState() &&\n                                                <div className=\"invalid-feedback\">State is required</div>\n                                            }\n\n                                        </Form.Group>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridCountryName\">\n                                            <Form.Label>Country</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={country}\n                                                placeholder=\"Your Country. eg: India\"\n                                                className={'form-control' + (!validateCountry() && ' is-invalid')}\n                                                onChange={(e) => setCountry(e.target.value)}\n                                            />\n                                            {!validateCountry() &&\n                                                <div className=\"invalid-feedback\">Country is required</div>\n                                            }\n\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Button type=\"submit\" variant=\"dark\" disabled={addressValid ? true : false}>\n                                        Deliver Here\n                                    </Button>\n                                    {addressValid && <div className=\"text-success mt-2\">Address Saved Successfully</div>}\n\n                                </Form>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                        <Accordion.Toggle as={Button} variant=\"secondary\" disabled={addressValid ? false : true} className=\"text-left\" onClick={() => console.log(\"hii\")} eventKey=\"1\">\n                            Payment Options\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <PaymentForm\n                                    cvc={cvc}\n                                    setCvc={setCvc}\n                                    expiry={expiry}\n                                    setExpiry={setExpiry}\n                                    name={name}\n                                    setName={setName}\n                                    number={number}\n                                    setNumber={setNumber}\n                                    handlePayment={handlePayment}\n                                />\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n            </Container>\n            <Footer />\n        </>\n    )\n}\n\nexport default Checkout\n"]},"metadata":{},"sourceType":"module"}