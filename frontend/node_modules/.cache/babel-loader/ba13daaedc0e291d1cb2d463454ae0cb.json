{"ast":null,"code":"import { sellerConstants } from '../constants';\nimport { alertActions } from './';\nimport { sellerService } from '../../services';\nexport const sellerActions = {\n  addProduct,\n  viewProduct\n};\n\nfunction addProduct(data, sellerId, setProgress) {\n  return dispatch => {\n    dispatch(request());\n    return sellerService.addProduct(data, sellerId, setProgress).then(res => {\n      dispatch(success(res.products));\n      dispatch(alertActions.success(\"product added successfully\"));\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: sellerConstants.ADD_REQUEST\n    };\n  }\n\n  function success(products) {\n    return {\n      type: sellerConstants.ADD_SUCCESS,\n      products\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerConstants.ADD_FAILURE,\n      error\n    };\n  }\n}\n\nfunction viewProduct(sellerId) {\n  return dispatch => {\n    dispatch(request());\n    sellerService.viewProduct(sellerId).then(products => {\n      dispatch(success(products));\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.message.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: sellerConstants.VIEW_REQUEST\n    };\n  }\n\n  function success(products) {\n    return {\n      type: sellerConstants.VIEW_SUCCESS,\n      products\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerConstants.VIEW_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/redux/actions/seller.actions.js"],"names":["sellerConstants","alertActions","sellerService","sellerActions","addProduct","viewProduct","data","sellerId","setProgress","dispatch","request","then","res","success","products","error","failure","toString","type","ADD_REQUEST","ADD_SUCCESS","ADD_FAILURE","message","VIEW_REQUEST","VIEW_SUCCESS","VIEW_FAILURE"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,UADyB;AAEzBC,EAAAA;AAFyB,CAAtB;;AAKP,SAASD,UAAT,CAAoBE,IAApB,EAA0BC,QAA1B,EAAoCC,WAApC,EAAiD;AAC7C,SAAOC,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEA,WAAOR,aAAa,CAACE,UAAd,CAAyBE,IAAzB,EAA+BC,QAA/B,EAAyCC,WAAzC,EACFG,IADE,CAECC,GAAG,IAAI;AACHH,MAAAA,QAAQ,CAACI,OAAO,CAACD,GAAG,CAACE,QAAL,CAAR,CAAR;AACAL,MAAAA,QAAQ,CAACR,YAAY,CAACY,OAAb,CAAqB,4BAArB,CAAD,CAAR;AAEH,KANF,EAOCE,KAAK,IAAI;AACLN,MAAAA,QAAQ,CAACO,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAR,MAAAA,QAAQ,CAACR,YAAY,CAACc,KAAb,CAAmBA,KAAK,CAACE,QAAN,EAAnB,CAAD,CAAR;AACH,KAVF,CAAP;AAYH,GAhBD;;AAkBA,WAASP,OAAT,GAAmB;AAAE,WAAO;AAAEQ,MAAAA,IAAI,EAAElB,eAAe,CAACmB;AAAxB,KAAP;AAA8C;;AACnE,WAASN,OAAT,CAAiBC,QAAjB,EAA2B;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAElB,eAAe,CAACoB,WAAxB;AAAqCN,MAAAA;AAArC,KAAP;AAAwD;;AACrF,WAASE,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAElB,eAAe,CAACqB,WAAxB;AAAqCN,MAAAA;AAArC,KAAP;AAAqD;AAClF;;AAED,SAASV,WAAT,CAAqBE,QAArB,EAA+B;AAC3B,SAAOE,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEAR,IAAAA,aAAa,CAACG,WAAd,CAA0BE,QAA1B,EACKI,IADL,CAEQG,QAAQ,IAAI;AACRL,MAAAA,QAAQ,CAACI,OAAO,CAACC,QAAD,CAAR,CAAR;AACH,KAJT,EAKQC,KAAK,IAAI;AAELN,MAAAA,QAAQ,CAACO,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAR,MAAAA,QAAQ,CAACR,YAAY,CAACc,KAAb,CAAmBA,KAAK,CAACO,OAAN,CAAcL,QAAd,EAAnB,CAAD,CAAR;AACH,KATT;AAWH,GAfD;;AAiBA,WAASP,OAAT,GAAmB;AAAE,WAAO;AAAEQ,MAAAA,IAAI,EAAElB,eAAe,CAACuB;AAAxB,KAAP;AAA+C;;AACpE,WAASV,OAAT,CAAiBC,QAAjB,EAA2B;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAElB,eAAe,CAACwB,YAAxB;AAAsCV,MAAAA;AAAtC,KAAP;AAAyD;;AACtF,WAASE,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAElB,eAAe,CAACyB,YAAxB;AAAsCV,MAAAA;AAAtC,KAAP;AAAsD;AACnF","sourcesContent":["import { sellerConstants } from '../constants';\nimport { alertActions } from './';\nimport { sellerService } from '../../services';\n\nexport const sellerActions = {\n    addProduct,\n    viewProduct\n};\n\nfunction addProduct(data, sellerId, setProgress) {\n    return dispatch => {\n\n        dispatch(request());\n\n        return sellerService.addProduct(data, sellerId, setProgress)\n            .then(\n                res => {\n                    dispatch(success(res.products));\n                    dispatch(alertActions.success(\"product added successfully\"));\n\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request() { return { type: sellerConstants.ADD_REQUEST } }\n    function success(products) { return { type: sellerConstants.ADD_SUCCESS, products } }\n    function failure(error) { return { type: sellerConstants.ADD_FAILURE, error } }\n}\n\nfunction viewProduct(sellerId) {\n    return dispatch => {\n\n        dispatch(request());\n\n        sellerService.viewProduct(sellerId)\n            .then(\n                products => {\n                    dispatch(success(products));\n                },\n                error => {\n\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.message.toString()));\n                }\n            );\n    };\n\n    function request() { return { type: sellerConstants.VIEW_REQUEST } }\n    function success(products) { return { type: sellerConstants.VIEW_SUCCESS, products } }\n    function failure(error) { return { type: sellerConstants.VIEW_FAILURE, error } }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}