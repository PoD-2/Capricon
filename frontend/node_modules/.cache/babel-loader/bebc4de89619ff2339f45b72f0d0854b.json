{"ast":null,"code":"var _jsxFileName = \"/Users/santhosh/myFiles/Capricon/src/pages/SellerRegister/SellerRegister.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form, Alert, Col, Container } from \"react-bootstrap\";\nimport \"./SellerRegister.css\";\nimport Logo from '../../images/capcricon.png';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sellerActions, alertActions } from '../../redux/actions';\nimport { formValidation as validate } from '../../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SellerRegister() {\n  _s();\n\n  //redux integration\n  const loggingIn = useSelector(state => state.sellerAuth.loading);\n  const user = useSelector(state => state.userAuth.user);\n  const message = useSelector(state => state.alert.message);\n  const alertType = useSelector(state => state.alert.type);\n  const dispatch = useDispatch(); //state of this page\n\n  const [sellerName, setSellerName] = useState(user ? user.userName : \"\");\n  const [companyName, setCompanyName] = useState(user ? validate.checkForCompanyName(user.emailId) : \"\");\n  const [companyEmail, setCompanyEmail] = useState(user ? user.emailId : \"\");\n  const [csEmailId, setCsEmailId] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(user ? user.phoneNumber : \"\");\n  const [csPhoneNumber, setCsPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(user ? user.address === undefined ? \"\" : user.address.addressline : \"\");\n  const [city, setCity] = useState(user ? user.address === undefined ? \"\" : user.address.city : \"\");\n  const [state, setState] = useState(user ? user.address === undefined ? \"\" : user.address.state : \"\");\n  const [country, setCountry] = useState(user ? user.address === undefined ? \"\" : user.address.country : \"\");\n  const [pincode, setPincode] = useState(user ? user.address === undefined ? \"\" : user.address.pinCode : \"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [rememberChecked, setRememberChecked] = useState(false); //FORM VALIDATION:\n  // if form is valid on submit, this function return true, else false\n\n  function validatePassword() {\n    return validate.passwordValidation(submitted, password);\n  }\n\n  function validateEmail() {\n    return validate.emailValidation(submitted, companyEmail);\n  }\n\n  function sellerNameValidation() {\n    return validate.nameValidation(submitted, sellerName);\n  }\n\n  function companyNameValidation() {\n    return validate.nameValidation(submitted, companyName);\n  }\n\n  function validateCsEmail() {\n    return validate.emailValidation(submitted, csEmailId);\n  }\n\n  function validatePhoneNumber() {\n    return validate.mobileNumberValidation(submitted, phoneNumber);\n  }\n\n  function validateCSPhoneNumber() {\n    return validate.mobileNumberValidation(submitted, csPhoneNumber);\n  }\n\n  function validateAddress() {\n    return validate.nameValidation(submitted, address);\n  }\n\n  function validateCity() {\n    return validate.nameValidation(submitted, city);\n  }\n\n  function validateState() {\n    return validate.nameValidation(submitted, state);\n  }\n\n  function validateCountry() {\n    return validate.nameValidation(submitted, country);\n  }\n\n  function validateZipCode() {\n    return validate.zipcodeValidation(submitted, pincode);\n  }\n\n  function checkAllValidity() {\n    if (validatePassword() && validateEmail() && sellerNameValidation() && companyNameValidation() && validateCsEmail() && validatePhoneNumber() && validateCSPhoneNumber() && validateAddress() && validateCity() && validateState() && validateCountry() && validateZipCode()) {\n      return true;\n    }\n\n    return false;\n  } //check if remember checkbox is clicked\n\n\n  const checkBoxClicked = e => {\n    let isChecked = e.target.checked;\n    setRememberChecked(isChecked);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setSubmitted(true); //dispatch only if input fields have value and also password is 8 charachters min\n\n    if (checkAllValidity() && submitted) {\n      const seller = {\n        sellerName,\n        companyName,\n        \"emailId\": companyEmail,\n        csEmailId,\n        password,\n        phoneNumber,\n        csPhoneNumber,\n        \"address\": {\n          \"line\": address,\n          city,\n          pincode,\n          state,\n          country\n        }\n      };\n      dispatch(sellerActions.register(seller, rememberChecked));\n    }\n  } //clear the alert\n\n\n  useEffect(() => {\n    setTimeout(function () {\n      // clear alert after 3 secomds\n      dispatch(alertActions.clear());\n    }, 3000);\n  }, [alertType, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [message && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: alertType === \"alert-success\" ? \"success\" : \"danger\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Logo,\n          width: \"200\",\n          height: \"120\",\n          className: \"image\",\n          alt: \"capricon logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-weight-bold text-center mt-4 mb-0\",\n      style: {\n        fontSize: 32\n      },\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-muted text-monospace mb-5\",\n          style: {\n            fontSize: 22\n          },\n          children: \"Become a Seller\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"formGridName\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Seller Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                autoFocus: true,\n                type: \"text\",\n                value: sellerName,\n                placeholder: \"Your name\",\n                className: 'form-control' + (!sellerNameValidation() && ' is-invalid'),\n                onChange: e => setSellerName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this), !sellerNameValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Name is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"formGridCompanyName\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Company Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: companyName,\n                placeholder: \"Your company name\",\n                className: 'form-control' + (!companyNameValidation() && ' is-invalid'),\n                onChange: e => setCompanyName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 33\n              }, this), !companyNameValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Company Name is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"formGridEmail\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Company Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                value: companyEmail,\n                placeholder: \"mail@company.com\",\n                className: 'form-control' + (!validateEmail() && ' is-invalid'),\n                onChange: e => setCompanyEmail(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 33\n              }, this), !validateEmail() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Email is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"formGridCsEmail\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Customer support email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                value: csEmailId,\n                placeholder: \"cs@yourcompany.com\",\n                className: 'form-control' + (!validateCsEmail() && ' is-invalid'),\n                onChange: e => setCsEmailId(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this), !validateCsEmail() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Customer support email is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"formGridPhoneNumber\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Phone Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: phoneNumber,\n                placeholder: \"Your company phone number\",\n                className: 'form-control' + (!validatePhoneNumber() && ' is-invalid'),\n                onChange: e => setPhoneNumber(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 33\n              }, this), !validatePhoneNumber() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Phone Number is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"formGridCcPhoneNumber\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Customer support phone number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: csPhoneNumber,\n                placeholder: \"CS phone number\",\n                className: 'form-control' + (!validateCSPhoneNumber() && ' is-invalid'),\n                onChange: e => setCsPhoneNumber(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 33\n              }, this), !validateCSPhoneNumber() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"CS phone number is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 4,\n              controlId: \"password\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                value: password,\n                placeholder: \"Enter password\",\n                className: 'form-control' + (!validatePassword() && ' is-invalid'),\n                onChange: e => setPassword(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 29\n              }, this), validatePassword() ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                className: \"text-muted\",\n                children: \"Password must be minimum 8 characters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Password must be minimum 8 characters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 8,\n              controlId: \"formGridAddress\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Address line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: address,\n                placeholder: \"Company address\",\n                className: 'form-control' + (!validateAddress() && ' is-invalid'),\n                onChange: e => setAddress(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this), !validateAddress() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Address is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 3,\n              controlId: \"formGridCity\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"City\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: city,\n                placeholder: \"Company city name\",\n                className: 'form-control' + (!validateCity() && ' is-invalid'),\n                onChange: e => setCity(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 33\n              }, this), !validateCity() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"City name is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 3,\n              controlId: \"formGridState\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: state,\n                placeholder: \"Company state name\",\n                className: 'form-control' + (!validateState() && ' is-invalid'),\n                onChange: e => setState(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 33\n              }, this), !validateState() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"State name is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 3,\n              controlId: \"formGridCountry\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Country\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: country,\n                placeholder: \"Company country name\",\n                className: 'form-control' + (!validateCountry() && ' is-invalid'),\n                onChange: e => setCountry(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 33\n              }, this), !validateCountry() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Country name is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              md: 3,\n              controlId: \"formGridZipCode\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"ZipCode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                value: pincode,\n                maxLength: 6,\n                placeholder: \"Company pincode\",\n                className: 'form-control' + (!validateZipCode() && ' is-invalid'),\n                onChange: e => setPincode(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 33\n              }, this), !validateZipCode() && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"invalid-feedback\",\n                children: \"Pincode is required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between align-items-center flex-row RegisterButton\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"formBasicCheckbox\",\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                onChange: e => checkBoxClicked(e),\n                type: \"checkbox\",\n                label: \"Remember me\",\n                checked: rememberChecked\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"link\",\n              className: \"pb-4 m-0\",\n              children: \"Forgot password?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            block: true,\n            type: \"submit\",\n            className: \"RegisterButton\",\n            children: [loggingIn && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"spinner-grow spinner-grow-sm mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 43\n            }, this), \"Register as a Seller\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-weight-normal mt-5 mb-2 RegisterButton\",\n          style: {\n            fontSize: 22\n          },\n          children: \"Already a seller at capricon?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"RegisterButton mb-5\",\n          href: \"/seller/login\",\n          block: true,\n          variant: \"outline-dark\",\n          children: \"Login as a Seller\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SellerRegister, \"qCN5uBMsk4RKvHs1ZzEn3vF8rSM=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = SellerRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"SellerRegister\");","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/pages/SellerRegister/SellerRegister.js"],"names":["React","useState","useEffect","Button","Form","Alert","Col","Container","Logo","useDispatch","useSelector","sellerActions","alertActions","formValidation","validate","SellerRegister","loggingIn","state","sellerAuth","loading","user","userAuth","message","alert","alertType","type","dispatch","sellerName","setSellerName","userName","companyName","setCompanyName","checkForCompanyName","emailId","companyEmail","setCompanyEmail","csEmailId","setCsEmailId","password","setPassword","phoneNumber","setPhoneNumber","csPhoneNumber","setCsPhoneNumber","address","setAddress","undefined","addressline","city","setCity","setState","country","setCountry","pincode","setPincode","pinCode","submitted","setSubmitted","rememberChecked","setRememberChecked","validatePassword","passwordValidation","validateEmail","emailValidation","sellerNameValidation","nameValidation","companyNameValidation","validateCsEmail","validatePhoneNumber","mobileNumberValidation","validateCSPhoneNumber","validateAddress","validateCity","validateState","validateCountry","validateZipCode","zipcodeValidation","checkAllValidity","checkBoxClicked","e","isChecked","target","checked","handleSubmit","event","preventDefault","seller","register","setTimeout","clear","fontSize","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Form, Alert, Col, Container } from \"react-bootstrap\";\nimport \"./SellerRegister.css\";\nimport Logo from '../../images/capcricon.png';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sellerActions, alertActions } from '../../redux/actions';\nimport { formValidation as validate } from '../../services';\n\nexport default function SellerRegister() {\n\n\n    //redux integration\n    const loggingIn = useSelector(state => state.sellerAuth.loading);\n    const user = useSelector(state => state.userAuth.user);\n    const message = useSelector(state => state.alert.message);\n    const alertType = useSelector(state => state.alert.type);\n    const dispatch = useDispatch();\n\n\n    //state of this page\n    const [sellerName, setSellerName] = useState(user ? user.userName : \"\");\n    const [companyName, setCompanyName] = useState(user ? validate.checkForCompanyName(user.emailId) : \"\");\n    const [companyEmail, setCompanyEmail] = useState(user ? user.emailId : \"\");\n    const [csEmailId, setCsEmailId] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [phoneNumber, setPhoneNumber] = useState(user ? user.phoneNumber : \"\");\n    const [csPhoneNumber, setCsPhoneNumber] = useState(\"\");\n    const [address, setAddress] = useState(user ? user.address === undefined ? \"\" : user.address.addressline : \"\");\n    const [city, setCity] = useState(user ? user.address === undefined ? \"\" : user.address.city : \"\");\n    const [state, setState] = useState(user ? user.address === undefined ? \"\" : user.address.state : \"\");\n    const [country, setCountry] = useState(user ? user.address  === undefined ? \"\" : user.address.country : \"\");\n    const [pincode, setPincode] = useState(user ? user.address === undefined ? \"\" : user.address.pinCode : \"\");\n    const [submitted, setSubmitted] = useState(false);\n    const [rememberChecked, setRememberChecked] = useState(false);\n\n\n\n\n\n\n\n    //FORM VALIDATION:\n\n    // if form is valid on submit, this function return true, else false\n    function validatePassword() {\n        return validate.passwordValidation(submitted, password);\n    }\n\n    function validateEmail() {\n        return validate.emailValidation(submitted, companyEmail);\n    }\n\n    function sellerNameValidation() {\n        return validate.nameValidation(submitted, sellerName);\n    }\n\n    function companyNameValidation() {\n        return validate.nameValidation(submitted, companyName);\n    }\n\n    function validateCsEmail() {\n        return validate.emailValidation(submitted, csEmailId);\n    }\n\n    function validatePhoneNumber() {\n        return validate.mobileNumberValidation(submitted, phoneNumber);\n    }\n\n    function validateCSPhoneNumber() {\n        return validate.mobileNumberValidation(submitted, csPhoneNumber);\n    }\n\n    function validateAddress() {\n        return validate.nameValidation(submitted, address);\n    }\n\n    function validateCity() {\n        return validate.nameValidation(submitted, city);\n    }\n\n    function validateState() {\n        return validate.nameValidation(submitted, state);\n    }\n\n    function validateCountry() {\n        return validate.nameValidation(submitted, country);\n    }\n\n    function validateZipCode() {\n        return validate.zipcodeValidation(submitted, pincode);\n    }\n\n    function checkAllValidity(){\n        if(validatePassword() && validateEmail() && sellerNameValidation() && companyNameValidation() \n        && validateCsEmail() && validatePhoneNumber() && validateCSPhoneNumber() && validateAddress() \n        && validateCity() && validateState() && validateCountry() && validateZipCode()){\n            return true;\n        }\n        return false;\n    }\n\n\n    //check if remember checkbox is clicked\n    const checkBoxClicked = (e) => {\n        let isChecked = e.target.checked;\n        setRememberChecked(isChecked);\n    }\n\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        setSubmitted(true);\n\n        //dispatch only if input fields have value and also password is 8 charachters min\n        if (checkAllValidity() && submitted) {\n            const seller = { sellerName, companyName, \"emailId\": companyEmail, csEmailId, password, phoneNumber, csPhoneNumber, \"address\": {\"line\": address, city, pincode, state, country}};\n            dispatch(sellerActions.register(seller, rememberChecked));\n\n        }\n    }\n\n    //clear the alert\n    useEffect(() => {\n        setTimeout(\n            function () {\n                // clear alert after 3 secomds\n                dispatch(alertActions.clear());\n            }, 3000);\n\n    }, [alertType, dispatch]);\n\n\n\n    return (\n        <>\n            {message && (\n                <Alert variant={(alertType === \"alert-success\") ? \"success\" : \"danger\"} >\n                    {message}\n                </Alert>\n            )}\n            <div className=\"d-flex justify-content-center mt-5\">\n                <a href=\"/\"><img\n                    src={Logo}\n                    width=\"200\"\n                    height=\"120\"\n                    className=\"image\"\n                    alt=\"capricon logo\"\n                /></a>\n            </div>\n            <p className=\"font-weight-bold text-center mt-4 mb-0\" style={{ fontSize: 32 }}>Register</p>\n            <div className=\"\">\n                <Container>\n                    <p className=\"text-center text-muted text-monospace mb-5\" style={{ fontSize: 22 }}>Become a Seller</p>\n                    <Form onSubmit={handleSubmit}>\n\n                        <Form.Row>\n                            <Form.Group as={Col} md={4} controlId=\"formGridName\">\n                                <Form.Label>Seller Name</Form.Label>\n                                <Form.Control\n                                    autoFocus\n                                    type=\"text\"\n                                    value={sellerName}\n                                    placeholder=\"Your name\"\n                                    className={'form-control' + (!sellerNameValidation() && ' is-invalid')}\n                                    onChange={(e) => setSellerName(e.target.value)}\n                                />\n                                {!sellerNameValidation() &&\n                                    <div className=\"invalid-feedback\">Name is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={4} controlId=\"formGridCompanyName\">\n                                <Form.Label>Company Name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={companyName}\n                                    placeholder=\"Your company name\"\n                                    className={'form-control' + (!companyNameValidation() && ' is-invalid')}\n                                    onChange={(e) => setCompanyName(e.target.value)}\n                                />\n                                {!companyNameValidation() &&\n                                    <div className=\"invalid-feedback\">Company Name is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={4} controlId=\"formGridEmail\">\n                                <Form.Label>Company Email</Form.Label>\n                                <Form.Control\n                                    type=\"email\"\n                                    value={companyEmail}\n                                    placeholder=\"mail@company.com\"\n                                    className={'form-control' + (!validateEmail() && ' is-invalid')}\n                                    onChange={(e) => setCompanyEmail(e.target.value)}\n                                />\n                                {!validateEmail() &&\n                                    <div className=\"invalid-feedback\">Email is required</div>\n                                }\n\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                            <Form.Group as={Col} md={4} controlId=\"formGridCsEmail\">\n                                <Form.Label>Customer support email</Form.Label>\n                                <Form.Control\n                                    type=\"email\"\n                                    value={csEmailId}\n                                    placeholder=\"cs@yourcompany.com\"\n                                    className={'form-control' + (!validateCsEmail() && ' is-invalid')}\n                                    onChange={(e) => setCsEmailId(e.target.value)}\n                                />\n                                {!validateCsEmail() &&\n                                    <div className=\"invalid-feedback\">Customer support email is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={4} controlId=\"formGridPhoneNumber\">\n                                <Form.Label>Phone Number</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={phoneNumber}\n                                    placeholder=\"Your company phone number\"\n                                    className={'form-control' + (!validatePhoneNumber() && ' is-invalid')}\n                                    onChange={(e) => setPhoneNumber(e.target.value)}\n                                />\n                                {!validatePhoneNumber() &&\n                                    <div className=\"invalid-feedback\">Phone Number is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={4} controlId=\"formGridCcPhoneNumber\">\n                                <Form.Label>Customer support phone number</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={csPhoneNumber}\n                                    placeholder=\"CS phone number\"\n                                    className={'form-control' + (!validateCSPhoneNumber() && ' is-invalid')}\n                                    onChange={(e) => setCsPhoneNumber(e.target.value)}\n                                />\n                                {!validateCSPhoneNumber() &&\n                                    <div className=\"invalid-feedback\">CS phone number is required</div>\n                                }\n\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                        <Form.Group as={Col} md={4} controlId=\"password\">\n                        <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                value={password}\n                                placeholder=\"Enter password\"\n                                className={'form-control' + (!validatePassword() && ' is-invalid')}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                            {validatePassword() ? (\n                                <Form.Text className=\"text-muted\">\n                                    Password must be minimum 8 characters\n                                </Form.Text>\n                            ) : (\n                                <div className=\"invalid-feedback\">Password must be minimum 8 characters</div>\n                            )\n                            }\n                        </Form.Group>\n                            <Form.Group as={Col} md={8} controlId=\"formGridAddress\">\n                                <Form.Label>Address line</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={address}\n                                    placeholder=\"Company address\"\n                                    className={'form-control' + (!validateAddress() && ' is-invalid')}\n                                    onChange={(e) => setAddress(e.target.value)}\n                                />\n                                {!validateAddress() &&\n                                    <div className=\"invalid-feedback\">Address is required</div>\n                                }\n\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                            <Form.Group as={Col} md={3} controlId=\"formGridCity\">\n                                <Form.Label>City</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={city}\n                                    placeholder=\"Company city name\"\n                                    className={'form-control' + (!validateCity() && ' is-invalid')}\n                                    onChange={(e) => setCity(e.target.value)}\n                                />\n                                {!validateCity() &&\n                                    <div className=\"invalid-feedback\">City name is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={3} controlId=\"formGridState\">\n                                <Form.Label>State</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={state}\n                                    placeholder=\"Company state name\"\n                                    className={'form-control' + (!validateState() && ' is-invalid')}\n                                    onChange={(e) => setState(e.target.value)}\n                                />\n                                {!validateState() &&\n                                    <div className=\"invalid-feedback\">State name is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={3} controlId=\"formGridCountry\">\n                                <Form.Label>Country</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={country}\n                                    placeholder=\"Company country name\"\n                                    className={'form-control' + (!validateCountry() && ' is-invalid')}\n                                    onChange={(e) => setCountry(e.target.value)}\n                                />\n                                {!validateCountry() &&\n                                    <div className=\"invalid-feedback\">Country name is required</div>\n                                }\n\n                            </Form.Group>\n                            <Form.Group as={Col} md={3} controlId=\"formGridZipCode\">\n                                <Form.Label>ZipCode</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    value={pincode}\n                                    maxLength={6}\n                                    placeholder=\"Company pincode\"\n                                    className={'form-control' + (!validateZipCode() && ' is-invalid')}\n                                    onChange={(e) => setPincode(e.target.value)}\n                                />\n                                {!validateZipCode() &&\n                                    <div className=\"invalid-feedback\">Pincode is required</div>\n                                }\n\n                            </Form.Group>\n                        </Form.Row>\n\n\n\n                        <div className=\"d-flex justify-content-between align-items-center flex-row RegisterButton\">\n                            <Form.Group controlId=\"formBasicCheckbox\">\n                                <Form.Check onChange={e => checkBoxClicked(e)} type=\"checkbox\" label=\"Remember me\" checked={rememberChecked} />\n                            </Form.Group>\n                            <Button variant=\"link\" className=\"pb-4 m-0\" >Forgot password?</Button>\n                        </div>\n                        <Button block type=\"submit\" className=\"RegisterButton\">\n                            {loggingIn && <span className=\"spinner-grow spinner-grow-sm mr-1\"></span>}\n                            Register as a Seller\n                        </Button>\n                    </Form>\n                    <p className=\"font-weight-normal mt-5 mb-2 RegisterButton\" style={{ fontSize: 22 }}>Already a seller at capricon?</p>\n                    <Button className=\"RegisterButton mb-5\" href=\"/seller/login\" block variant=\"outline-dark\">\n                        Login as a Seller\n                    </Button>\n                </Container>\n            </div>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}