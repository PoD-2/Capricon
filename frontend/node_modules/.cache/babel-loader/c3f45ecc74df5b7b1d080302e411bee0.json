{"ast":null,"code":"import { sellerProductConstants } from '../constants';\nimport { alertActions } from '.';\nimport { sellerService } from '../../services';\nexport const sellerProductActions = {\n  add,\n  view\n};\n\nfunction add(data, sellerId, setProgress) {\n  return dispatch => {\n    dispatch(request());\n    return sellerService.addProduct(data, sellerId, setProgress).then(res => {\n      dispatch(success(res.products));\n      dispatch(alertActions.success(\"product added successfully\"));\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: sellerProductConstants.ADD_REQUEST\n    };\n  }\n\n  function success(products) {\n    return {\n      type: sellerProductConstants.ADD_SUCCESS,\n      products\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerProductConstants.ADD_FAILURE,\n      error\n    };\n  }\n}\n\nfunction view(sellerId) {\n  return dispatch => {\n    dispatch(request());\n    sellerService.viewProduct(sellerId).then(products => {\n      dispatch(success(products));\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.message.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: sellerProductConstants.VIEW_REQUEST\n    };\n  }\n\n  function success(products) {\n    return {\n      type: sellerProductConstants.VIEW_SUCCESS,\n      products\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerProductConstants.VIEW_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/redux/actions/seller.product.actions.js"],"names":["sellerProductConstants","alertActions","sellerService","sellerProductActions","add","view","data","sellerId","setProgress","dispatch","request","addProduct","then","res","success","products","error","failure","toString","type","ADD_REQUEST","ADD_SUCCESS","ADD_FAILURE","viewProduct","message","VIEW_REQUEST","VIEW_SUCCESS","VIEW_FAILURE"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,cAAvC;AACA,SAASC,YAAT,QAA6B,GAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,OAAO,MAAMC,oBAAoB,GAAG;AAChCC,EAAAA,GADgC;AAEhCC,EAAAA;AAFgC,CAA7B;;AAKP,SAASD,GAAT,CAAaE,IAAb,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0C;AACtC,SAAOC,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEA,WAAOR,aAAa,CAACS,UAAd,CAAyBL,IAAzB,EAA+BC,QAA/B,EAAyCC,WAAzC,EACFI,IADE,CAECC,GAAG,IAAI;AACHJ,MAAAA,QAAQ,CAACK,OAAO,CAACD,GAAG,CAACE,QAAL,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACR,YAAY,CAACa,OAAb,CAAqB,4BAArB,CAAD,CAAR;AAEH,KANF,EAOCE,KAAK,IAAI;AACLP,MAAAA,QAAQ,CAACQ,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAT,MAAAA,QAAQ,CAACR,YAAY,CAACe,KAAb,CAAmBA,KAAK,CAACE,QAAN,EAAnB,CAAD,CAAR;AACH,KAVF,CAAP;AAYH,GAhBD;;AAkBA,WAASR,OAAT,GAAmB;AAAE,WAAO;AAAES,MAAAA,IAAI,EAAEnB,sBAAsB,CAACoB;AAA/B,KAAP;AAAqD;;AAC1E,WAASN,OAAT,CAAiBC,QAAjB,EAA2B;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEnB,sBAAsB,CAACqB,WAA/B;AAA4CN,MAAAA;AAA5C,KAAP;AAA+D;;AAC5F,WAASE,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAEnB,sBAAsB,CAACsB,WAA/B;AAA4CN,MAAAA;AAA5C,KAAP;AAA4D;AACzF;;AAED,SAASX,IAAT,CAAcE,QAAd,EAAwB;AACpB,SAAOE,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEAR,IAAAA,aAAa,CAACqB,WAAd,CAA0BhB,QAA1B,EACKK,IADL,CAEQG,QAAQ,IAAI;AACRN,MAAAA,QAAQ,CAACK,OAAO,CAACC,QAAD,CAAR,CAAR;AACH,KAJT,EAKQC,KAAK,IAAI;AAELP,MAAAA,QAAQ,CAACQ,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAT,MAAAA,QAAQ,CAACR,YAAY,CAACe,KAAb,CAAmBA,KAAK,CAACQ,OAAN,CAAcN,QAAd,EAAnB,CAAD,CAAR;AACH,KATT;AAWH,GAfD;;AAiBA,WAASR,OAAT,GAAmB;AAAE,WAAO;AAAES,MAAAA,IAAI,EAAEnB,sBAAsB,CAACyB;AAA/B,KAAP;AAAsD;;AAC3E,WAASX,OAAT,CAAiBC,QAAjB,EAA2B;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEnB,sBAAsB,CAAC0B,YAA/B;AAA6CX,MAAAA;AAA7C,KAAP;AAAgE;;AAC7F,WAASE,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAEnB,sBAAsB,CAAC2B,YAA/B;AAA6CX,MAAAA;AAA7C,KAAP;AAA6D;AAC1F","sourcesContent":["import { sellerProductConstants } from '../constants';\nimport { alertActions } from '.';\nimport { sellerService } from '../../services';\n\nexport const sellerProductActions = {\n    add,\n    view\n};\n\nfunction add(data, sellerId, setProgress) {\n    return dispatch => {\n\n        dispatch(request());\n\n        return sellerService.addProduct(data, sellerId, setProgress)\n            .then(\n                res => {\n                    dispatch(success(res.products));\n                    dispatch(alertActions.success(\"product added successfully\"));\n\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request() { return { type: sellerProductConstants.ADD_REQUEST } }\n    function success(products) { return { type: sellerProductConstants.ADD_SUCCESS, products } }\n    function failure(error) { return { type: sellerProductConstants.ADD_FAILURE, error } }\n}\n\nfunction view(sellerId) {\n    return dispatch => {\n\n        dispatch(request());\n\n        sellerService.viewProduct(sellerId)\n            .then(\n                products => {\n                    dispatch(success(products));\n                },\n                error => {\n\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.message.toString()));\n                }\n            );\n    };\n\n    function request() { return { type: sellerProductConstants.VIEW_REQUEST } }\n    function success(products) { return { type: sellerProductConstants.VIEW_SUCCESS, products } }\n    function failure(error) { return { type: sellerProductConstants.VIEW_FAILURE, error } }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}