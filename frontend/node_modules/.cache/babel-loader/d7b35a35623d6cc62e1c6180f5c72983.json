{"ast":null,"code":"var _jsxFileName = \"/Users/santhosh/myFiles/Capricon/src/pages/Checkout/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Accordion, Form, Card, Container, Col, Button } from 'react-bootstrap';\nimport NavBar from '../../components/NavBar';\nimport { formValidation as validate } from '../../services';\nimport PaymentForm from '../../components/PaymentForm';\nimport './Checkout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Checkout() {\n  _s();\n\n  const [addressLine, setAddressLine] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [pincode, setPincode] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [addressValid, setAddressValid] = useState(false); //form validation\n\n  function validateAddress() {\n    return validate.nameValidation(submitted, addressLine);\n  }\n\n  function validateCity() {\n    return validate.nameValidation(submitted, city);\n  }\n\n  function validateState() {\n    return validate.nameValidation(submitted, state);\n  }\n\n  function validateCountry() {\n    return validate.nameValidation(submitted, country);\n  }\n\n  function validatePinCode() {\n    return validate.zipcodeValidation(submitted, pincode);\n  }\n\n  console.log(\"inside validator\" + validate.nameValidation(true, \"\"));\n\n  function checkAllValidity() {\n    if (validateAddress() && validateCity() && validateState() && validateCountry() && validatePinCode()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleAddressSubmit(event) {\n    event.preventDefault();\n    setSubmitted(true);\n\n    if (checkAllValidity()) {\n      setAddressValid(true);\n    } else {\n      setAddressValid(false);\n    }\n  }\n\n  console.log(addressValid);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mb-3 mt-5 sellerPageTitle\",\n        children: \"CHECK OUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"LineSeperator mb-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        defaultActiveKey: \"0\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n            as: Button,\n            variant: \"secondary\",\n            className: \"text-left\",\n            eventKey: \"0\",\n            children: \"Delivery Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n            eventKey: \"0\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: handleAddressSubmit,\n                children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 8,\n                    controlId: \"formGridAddress\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Address line 1\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      autoFocus: true,\n                      type: \"text\",\n                      value: addressLine,\n                      placeholder: \"Your Address Line\",\n                      className: 'form-control' + (!validateAddress() && ' is-invalid'),\n                      onChange: e => setAddressLine(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 89,\n                      columnNumber: 45\n                    }, this), !validateAddress() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"Address is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridPinCode\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Pincode\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"Number\",\n                      value: pincode,\n                      placeholder: \"Your Pin code\",\n                      className: 'form-control' + (!validatePinCode() && ' is-invalid'),\n                      onChange: e => setPincode(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 45\n                    }, this), !validatePinCode() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"Pincode is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 112,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridCityName\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"City\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      value: city,\n                      placeholder: \"City/Distrit/Town\",\n                      className: 'form-control' + (!validateCity() && ' is-invalid'),\n                      onChange: e => setCity(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 120,\n                      columnNumber: 45\n                    }, this), !validateCity() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"City name is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 128,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridStateName\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"State\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 133,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      value: state,\n                      placeholder: \"Your State. eg: Tamil Nadu\",\n                      className: 'form-control' + (!validateState() && ' is-invalid'),\n                      onChange: e => setState(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 45\n                    }, this), !validateState() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"State is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    md: 4,\n                    controlId: \"formGridCountryName\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Country\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      value: country,\n                      placeholder: \"Your Country. eg: India\",\n                      className: 'form-control' + (!validateCountry() && ' is-invalid'),\n                      onChange: e => setCountry(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 148,\n                      columnNumber: 45\n                    }, this), !validateCountry() && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"invalid-feedback\",\n                      children: \"Country is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"dark\",\n                  children: \"Deliver Here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n            as: Button,\n            variant: \"secondary\",\n            disabled: addressValid ? false : true,\n            className: \"text-left\",\n            onClick: () => console.log(\"hii\"),\n            eventKey: \"1\",\n            children: \"Payment Options\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n            eventKey: \"1\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(PaymentForm, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Checkout, \"Ex9pNh6b3QQJstALfeM5lUJD3vU=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/pages/Checkout/Checkout.js"],"names":["React","useState","Accordion","Form","Card","Container","Col","Button","NavBar","formValidation","validate","PaymentForm","Checkout","addressLine","setAddressLine","city","setCity","pincode","setPincode","state","setState","country","setCountry","submitted","setSubmitted","addressValid","setAddressValid","validateAddress","nameValidation","validateCity","validateState","validateCountry","validatePinCode","zipcodeValidation","console","log","checkAllValidity","handleAddressSubmit","event","preventDefault","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Accordion, Form, Card, Container, Col, Button } from 'react-bootstrap'\nimport NavBar from '../../components/NavBar'\nimport { formValidation as validate } from '../../services';\nimport PaymentForm from '../../components/PaymentForm';\nimport './Checkout.css'\n\nfunction Checkout() {\n\n\n    const [addressLine, setAddressLine] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [pincode, setPincode] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [country, setCountry] = useState(\"\");\n    const [submitted, setSubmitted] = useState(false);\n    const [addressValid, setAddressValid] = useState(false);\n\n\n\n    //form validation\n\n    function validateAddress() {\n        return validate.nameValidation(submitted, addressLine);\n    }\n\n    function validateCity() {\n        return validate.nameValidation(submitted, city);\n    }\n\n    function validateState() {\n        return validate.nameValidation(submitted, state);\n    }\n\n    function validateCountry() {\n        return validate.nameValidation(submitted, country);\n    }\n\n    function validatePinCode() {\n        return validate.zipcodeValidation(submitted, pincode);\n    }\n\n    console.log(\"inside validator\" + validate.nameValidation(true, \"\"));\n\n    function checkAllValidity(){\n        \n        if(validateAddress() && validateCity() && validateState() && validateCountry() && validatePinCode()){\n            return true;\n        }\n\n        return false;\n       \n    }\n\n    function handleAddressSubmit(event){\n        event.preventDefault();\n        setSubmitted(true);\n        if(checkAllValidity()){\n            setAddressValid(true);\n        } else {\n            setAddressValid(false);\n        }\n\n    }\n\n    console.log(addressValid);\n\n\n\n    return (\n        <>\n            <NavBar />\n            <Container>\n                <h3 className=\"mb-3 mt-5 sellerPageTitle\">CHECK OUT</h3>\n                <span className=\"LineSeperator mb-5\" />\n                <Accordion defaultActiveKey=\"0\">\n                    <Card>\n                        <Accordion.Toggle as={Button} variant=\"secondary\" className=\"text-left\" eventKey=\"0\">\n                            Delivery Address\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Form onSubmit={handleAddressSubmit}>\n\n                                    <Form.Row>\n\n                                        <Form.Group as={Col} md={8} controlId=\"formGridAddress\">\n                                            <Form.Label>Address line 1</Form.Label>\n                                            <Form.Control\n                                                autoFocus\n                                                type=\"text\"\n                                                value={addressLine}\n                                                placeholder=\"Your Address Line\"\n                                                className={'form-control' + (!validateAddress() && ' is-invalid')}\n                                                onChange={(e) => setAddressLine(e.target.value)}\n                                            />\n                                            {!validateAddress() &&\n                                                <div className=\"invalid-feedback\">Address is required</div>\n                                            }\n\n                                        </Form.Group>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridPinCode\">\n                                            <Form.Label>Pincode</Form.Label>\n                                            <Form.Control\n                                                type=\"Number\"\n                                                value={pincode}\n                                                placeholder=\"Your Pin code\"\n                                                className={'form-control' + (!validatePinCode() && ' is-invalid')}\n                                                onChange={(e) => setPincode(e.target.value)}\n                                            />\n                                            {!validatePinCode() &&\n                                                <div className=\"invalid-feedback\">Pincode is required</div>\n                                            }\n\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridCityName\">\n                                            <Form.Label>City</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={city}\n                                                placeholder=\"City/Distrit/Town\"\n                                                className={'form-control' + (!validateCity() && ' is-invalid')}\n                                                onChange={(e) => setCity(e.target.value)}\n                                            />\n                                            {!validateCity() &&\n                                                <div className=\"invalid-feedback\">City name is required</div>\n                                            }\n\n                                        </Form.Group>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridStateName\">\n                                            <Form.Label>State</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={state}\n                                                placeholder=\"Your State. eg: Tamil Nadu\"\n                                                className={'form-control' + (!validateState() && ' is-invalid')}\n                                                onChange={(e) => setState(e.target.value)}\n                                            />\n                                            {!validateState() &&\n                                                <div className=\"invalid-feedback\">State is required</div>\n                                            }\n\n                                        </Form.Group>\n                                        <Form.Group as={Col} md={4} controlId=\"formGridCountryName\">\n                                            <Form.Label>Country</Form.Label>\n                                            <Form.Control\n                                                type=\"text\"\n                                                value={country}\n                                                placeholder=\"Your Country. eg: India\"\n                                                className={'form-control' + (!validateCountry() && ' is-invalid')}\n                                                onChange={(e) => setCountry(e.target.value)}\n                                            />\n                                            {!validateCountry() &&\n                                                <div className=\"invalid-feedback\">Country is required</div>\n                                            }\n\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Button type=\"submit\" variant=\"dark\">\n                                  Deliver Here\n                                </Button>\n                                </Form>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                        <Accordion.Toggle as={Button} variant=\"secondary\" disabled={addressValid ? false : true} className=\"text-left\"  onClick={() => console.log(\"hii\")} eventKey=\"1\">\n                            Payment Options\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <PaymentForm />\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n            </Container>\n        </>\n    )\n}\n\nexport default Checkout\n"]},"metadata":{},"sourceType":"module"}