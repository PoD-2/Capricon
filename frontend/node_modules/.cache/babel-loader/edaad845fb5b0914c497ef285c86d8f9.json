{"ast":null,"code":"var _jsxFileName = \"/Users/santhosh/myFiles/Capricon/src/components/ProductUpload/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { Col, Button, Modal, Form, ProgressBar } from 'react-bootstrap';\nimport { formValidation as validate } from '../../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProductUpload(props) {\n  _s();\n\n  //states\n  const [productName, setProductName] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [color, setColor] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [quantity, setQuanity] = useState(\"\");\n  const [productImages, setProductImages] = useState([]);\n  const [submitted, setSubmitted] = useState(false); //reference to input type file\n\n  const fileInputRef = useRef(); //form validation\n\n  function productNameValidation() {\n    return validate.nameValidation(submitted, productName);\n  }\n\n  function categoryValidation() {\n    return validate.nameValidation(submitted, category);\n  }\n\n  function colorValidation() {\n    return validate.nameValidation(submitted, color);\n  }\n\n  function descriptionValidation() {\n    return validate.nameValidation(submitted, description);\n  }\n\n  function priceValidation() {\n    return validate.checkOnlyNumber(submitted, price);\n  }\n\n  function quantityValidation() {\n    return validate.checkOnlyNumber(submitted, quantity);\n  }\n\n  function productImagesValidation() {\n    return validate.productImageValidation(submitted, productImages);\n  }\n\n  const hideModal = () => {\n    props.closeModal();\n  }; //handles the submit \n\n\n  const handleProductSubmit = () => {\n    setSubmitted(true);\n  }; //to handle image upload\n\n\n  const imageFileHandler = e => {\n    setProductImages(e.target.files); // const fd = new FormData();\n    // fd.append('image', productImages);\n    // console.log('fd' + fd);\n  }; //to display images in modal\n\n\n  const createImageArray = () => {\n    let imageArray = [];\n\n    for (let i = 0; i < productImages.length; i++) {\n      let url = window.URL.createObjectURL(productImages[i]);\n      imageArray.push( /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        width: 100,\n        height: 100,\n        className: \"mx-2\",\n        alt: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }, this));\n    }\n\n    return imageArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.showModal,\n    onHide: hideModal,\n    size: \"lg\",\n    backdrop: \"static\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Add product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        className: \"mb-3\",\n        striped: true,\n        variant: \"success\",\n        now: 40\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleProductSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 6,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              autoFocus: true,\n              type: \"text\",\n              value: productName,\n              placeholder: \"Product full name\",\n              className: 'form-control' + (!productNameValidation() && ' is-invalid'),\n              onChange: e => setProductName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 25\n            }, this), !productNameValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product Name is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 6,\n            controlId: \"formGridCompanyName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: category,\n              placeholder: \"Product category like gadgets, cosmetics etc\",\n              className: 'form-control' + (!categoryValidation() && ' is-invalid'),\n              onChange: e => setCategory(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 25\n            }, this), !categoryValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Category is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 12,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: description,\n              placeholder: \"About this product\",\n              className: 'form-control' + (!descriptionValidation() && ' is-invalid'),\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 25\n            }, this), !descriptionValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product description is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 4,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: price,\n              placeholder: \"Product price in INR\",\n              className: 'form-control' + (!priceValidation() && ' is-invalid'),\n              onChange: e => setPrice(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, this), !priceValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product Price is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 4,\n            controlId: \"formGridCompanyName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              value: quantity,\n              placeholder: \"No of products you currently have\",\n              className: 'form-control' + (!quantityValidation() && ' is-invalid'),\n              onChange: e => setQuanity(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 25\n            }, this), !quantityValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Quantity is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 4,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: color,\n              placeholder: \"eg black, blue etc\",\n              className: 'form-control' + (!colorValidation() && ' is-invalid'),\n              onChange: e => setColor(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 25\n            }, this), !colorValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product color is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInput => fileInputRef.current = fileInput,\n        className: \"d-none\",\n        type: \"file\",\n        multiple: true,\n        onChange: imageFileHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Product images: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => fileInputRef.current.click(),\n        className: \"d-flex rounded align-items-center justify-content-center\",\n        style: {\n          backgroundColor: \"rgba(112, 112, 112, 0.1)\",\n          height: 200,\n          cursor: \"pointer\"\n        },\n        children: [\"Select files to upload\", productImages.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: \"Only Four Images Allowed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: \"Image is Required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), productImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mt-2 rounded\",\n        style: {\n          backgroundColor: \"rgba(112, 112, 112, 0.1)\"\n        },\n        children: createImageArray()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: hideModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleProductSubmit,\n        children: \"Add product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProductUpload, \"G2AqQl0wEjkzEtRElYY3Zb5KEew=\");\n\n_c = ProductUpload;\nexport default ProductUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductUpload\");","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/components/ProductUpload/index.js"],"names":["React","useState","useRef","Col","Button","Modal","Form","ProgressBar","formValidation","validate","ProductUpload","props","productName","setProductName","category","setCategory","color","setColor","description","setDescription","price","setPrice","quantity","setQuanity","productImages","setProductImages","submitted","setSubmitted","fileInputRef","productNameValidation","nameValidation","categoryValidation","colorValidation","descriptionValidation","priceValidation","checkOnlyNumber","quantityValidation","productImagesValidation","productImageValidation","hideModal","closeModal","handleProductSubmit","imageFileHandler","e","target","files","createImageArray","imageArray","i","length","url","window","URL","createObjectURL","push","showModal","value","fileInput","current","click","backgroundColor","height","cursor"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from 'react'\nimport { Col, Button, Modal, Form, ProgressBar } from 'react-bootstrap';\nimport { formValidation as validate } from '../../services';\n\nfunction ProductUpload(props) {\n    \n    //states\n    const [productName, setProductName] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [color, setColor] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [quantity, setQuanity] = useState(\"\");\n    const [productImages, setProductImages] = useState([]);\n    const [submitted, setSubmitted] = useState(false);\n    \n    //reference to input type file\n    const fileInputRef = useRef();\n\n    \n\n\n    //form validation\n\n    function productNameValidation() {\n        return validate.nameValidation(submitted, productName);\n    }\n\n    function categoryValidation() {\n        return validate.nameValidation(submitted, category);\n    }\n\n    function colorValidation() {\n        return validate.nameValidation(submitted, color);\n    }\n\n    function descriptionValidation() {\n        return validate.nameValidation(submitted, description);\n    }\n\n    function priceValidation() {\n        return validate.checkOnlyNumber(submitted, price);\n    }\n\n    function quantityValidation() {\n        return validate.checkOnlyNumber(submitted, quantity);\n    }\n\n    function productImagesValidation() {\n        return validate.productImageValidation(submitted, productImages);\n    }\n\n\n\n\n\n\n\n   \n    const hideModal = () => {\n        props.closeModal();\n    }\n    \n\n    //handles the submit \n    const handleProductSubmit = () => {\n        setSubmitted(true);\n    }\n    \n\n    //to handle image upload\n    const imageFileHandler = (e) => {\n        setProductImages(e.target.files);\n        // const fd = new FormData();\n        // fd.append('image', productImages);\n        // console.log('fd' + fd);\n    }\n   \n    \n    //to display images in modal\n    const createImageArray = () => {\n\n        let imageArray = [];\n\n        for(let i=0; i<productImages.length; i++) {\n            let url = window.URL.createObjectURL(productImages[i]);\n            imageArray.push(<img src={url} width={100} height={100} className=\"mx-2\" alt=\"...\" />);\n        }\n\n        return imageArray;\n    }\n\n  \n    \n\n\n    return (\n        <Modal\n        show={props.showModal}\n        onHide={hideModal}\n        size=\"lg\"\n        backdrop=\"static\"\n    >\n        <Modal.Header closeButton>\n            <Modal.Title>Add product</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <ProgressBar className=\"mb-3\" striped variant=\"success\" now={40} />\n            <Form onSubmit={handleProductSubmit}>\n                <Form.Row>\n                    <Form.Group as={Col} md={6} controlId=\"formGridName\">\n                        <Form.Label>Product Name</Form.Label>\n                        <Form.Control\n                            autoFocus\n                            type=\"text\"\n                            value={productName}\n                            placeholder=\"Product full name\"\n                            className={'form-control' + (!productNameValidation() && ' is-invalid')}\n                            onChange={(e) => setProductName(e.target.value)}\n                        />\n                        {!productNameValidation() &&\n                            <div className=\"invalid-feedback\">Product Name is required</div>\n                        }\n\n                    </Form.Group>\n                    <Form.Group as={Col} md={6} controlId=\"formGridCompanyName\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            value={category}\n                            placeholder=\"Product category like gadgets, cosmetics etc\"\n                            className={'form-control' + (!categoryValidation() && ' is-invalid')}\n                            onChange={(e) => setCategory(e.target.value)}\n                        />\n                        {!categoryValidation() &&\n                            <div className=\"invalid-feedback\">Category is required</div>\n                        }\n\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} md={12} controlId=\"formGridName\">\n                        <Form.Label>Product description</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            value={description}\n                            placeholder=\"About this product\"\n                            className={'form-control' + (!descriptionValidation() && ' is-invalid')}\n                            onChange={(e) => setDescription(e.target.value)}\n                        />\n                        {!descriptionValidation() &&\n                            <div className=\"invalid-feedback\">Product description is required</div>\n                        }\n\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} md={4} controlId=\"formGridName\">\n                        <Form.Label>Price</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            value={price}\n                            placeholder=\"Product price in INR\"\n                            className={'form-control' + (!priceValidation() && ' is-invalid')}\n                            onChange={(e) => setPrice(e.target.value)}\n                        />\n                        {!priceValidation() &&\n                            <div className=\"invalid-feedback\">Product Price is required</div>\n                        }\n\n                    </Form.Group>\n                    <Form.Group as={Col} md={4} controlId=\"formGridCompanyName\">\n                        <Form.Label>quantity</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            value={quantity}\n                            placeholder=\"No of products you currently have\"\n                            className={'form-control' + (!quantityValidation() && ' is-invalid')}\n                            onChange={(e) => setQuanity(e.target.value)}\n                        />\n                        {!quantityValidation() &&\n                            <div className=\"invalid-feedback\">Quantity is required</div>\n                        }\n\n                    </Form.Group>\n                    <Form.Group as={Col} md={4} controlId=\"formGridName\">\n                        <Form.Label>Product Color</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            value={color}\n                            placeholder=\"eg black, blue etc\"\n                            className={'form-control' + (!colorValidation() && ' is-invalid')}\n                            onChange={(e) => setColor(e.target.value)}\n                        />\n                        {!colorValidation() &&\n                            <div className=\"invalid-feedback\">Product color is required</div>\n                        }\n\n                    </Form.Group>\n                </Form.Row>\n\n            </Form>\n            <input ref={fileInput => fileInputRef.current = fileInput} className=\"d-none\" type=\"file\" multiple onChange={imageFileHandler} />\n            <Form.Label>Product images: </Form.Label>\n            <div onClick={() => fileInputRef.current.click()} className=\"d-flex rounded align-items-center justify-content-center\" style={{backgroundColor: \"rgba(112, 112, 112, 0.1)\", height: 200, cursor: \"pointer\"}}>\n             Select files to upload\n             {productImages.length > 0 ? \n                    <div className=\"invalid-feedback\">Only Four Images Allowed</div>\n                    : \n                    <div className=\"invalid-feedback\">Image is Required</div>\n            }\n            </div>\n            {productImages.length > 0 && (\n            <div className=\"p-3 mt-2 rounded\" style={{backgroundColor: \"rgba(112, 112, 112, 0.1)\"}}>\n            {createImageArray()}\n            </div>\n            )\n            }\n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant=\"secondary\" onClick={hideModal}>Close</Button>\n            <Button variant=\"primary\" onClick={handleProductSubmit}>Add product</Button>\n        </Modal.Footer>\n    </Modal>\n    )\n}\n\nexport default ProductUpload\n"]},"metadata":{},"sourceType":"module"}