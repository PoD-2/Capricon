{"ast":null,"code":"import { sellerConstants } from '../constants';\nimport { sellerService } from '../../services/';\nimport { alertActions } from './';\nexport const sellerActions = {\n  login,\n  logout,\n  register\n};\n\nfunction login(seller, remember, history) {\n  return dispatch => {\n    dispatch(request());\n    sellerService.login(seller, remember).then(seller => {\n      dispatch(success(seller));\n      history.push('/seller/dashboard');\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: sellerConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: sellerConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  sellerService.logout();\n  return {\n    type: sellerConstants.LOGOUT\n  };\n}\n\nfunction register(seller, remember, history) {\n  return dispatch => {\n    dispatch(request());\n    sellerService.register(seller, remember).then(seller => {\n      dispatch(success(seller));\n      history.push('/seller/dashboard');\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: sellerConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: sellerConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: sellerConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/redux/actions/seller.actions.js"],"names":["sellerConstants","sellerService","alertActions","sellerActions","login","logout","register","seller","remember","history","dispatch","request","then","success","push","error","failure","toString","user","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,IAA7B;AAEA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,KADyB;AAEzBC,EAAAA,MAFyB;AAGzBC,EAAAA;AAHyB,CAAtB;;AAMP,SAASF,KAAT,CAAeG,MAAf,EAAuBC,QAAvB,EAAiCC,OAAjC,EAA0C;AACtC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEAV,IAAAA,aAAa,CAACG,KAAd,CAAoBG,MAApB,EAA4BC,QAA5B,EACKI,IADL,CAEQL,MAAM,IAAI;AACFG,MAAAA,QAAQ,CAACG,OAAO,CAACN,MAAD,CAAR,CAAR;AACAE,MAAAA,OAAO,CAACK,IAAR,CAAa,mBAAb;AAEP,KANT,EAOQC,KAAK,IAAI;AACLL,MAAAA,QAAQ,CAACM,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAP,MAAAA,QAAQ,CAACR,YAAY,CAACa,KAAb,CAAmBA,KAAK,CAACE,QAAN,EAAnB,CAAD,CAAR;AACH,KAVT;AAYH,GAfD;;AAiBA,WAASN,OAAT,CAAiBO,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAEnB,eAAe,CAACoB,aAAxB;AAAuCF,MAAAA;AAAvC,KAAP;AAAsD;;AAC/E,WAASL,OAAT,CAAiBK,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAEnB,eAAe,CAACqB,aAAxB;AAAuCH,MAAAA;AAAvC,KAAP;AAAsD;;AAC/E,WAASF,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEnB,eAAe,CAACsB,aAAxB;AAAuCP,MAAAA;AAAvC,KAAP;AAAuD;AACpF;;AAED,SAASV,MAAT,GAAkB;AACdJ,EAAAA,aAAa,CAACI,MAAd;AACA,SAAO;AAAEc,IAAAA,IAAI,EAAEnB,eAAe,CAACuB;AAAxB,GAAP;AACH;;AAED,SAASjB,QAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AACzC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEAV,IAAAA,aAAa,CAACK,QAAd,CAAuBC,MAAvB,EAA8BC,QAA9B,EACKI,IADL,CAEQL,MAAM,IAAI;AACNG,MAAAA,QAAQ,CAACG,OAAO,CAACN,MAAD,CAAR,CAAR;AACAE,MAAAA,OAAO,CAACK,IAAR,CAAa,mBAAb;AAEH,KANT,EAOQC,KAAK,IAAI;AACLL,MAAAA,QAAQ,CAACM,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAP,MAAAA,QAAQ,CAACR,YAAY,CAACa,KAAb,CAAmBA,KAAK,CAACE,QAAN,EAAnB,CAAD,CAAR;AACH,KAVT;AAYH,GAfD;;AAiBA,WAASN,OAAT,CAAiBO,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAEnB,eAAe,CAACwB,gBAAxB;AAA0CN,MAAAA;AAA1C,KAAP;AAAyD;;AAClF,WAASL,OAAT,CAAiBK,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAEnB,eAAe,CAACyB,gBAAxB;AAA0CP,MAAAA;AAA1C,KAAP;AAAyD;;AAClF,WAASF,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAEnB,eAAe,CAAC0B,gBAAxB;AAA0CX,MAAAA;AAA1C,KAAP;AAA0D;AACvF","sourcesContent":["import { sellerConstants } from '../constants';\nimport { sellerService } from '../../services/';\nimport { alertActions } from './';\n\nexport const sellerActions = {\n    login,\n    logout,\n    register\n};\n\nfunction login(seller, remember, history) {\n    return dispatch => {\n        dispatch(request()); \n\n        sellerService.login(seller, remember)\n            .then(\n                seller => { \n                        dispatch(success(seller));\n                        history.push('/seller/dashboard');\n                   \n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: sellerConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: sellerConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: sellerConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    sellerService.logout();\n    return { type: sellerConstants.LOGOUT };\n}\n\nfunction register(seller, remember, history) {\n    return dispatch => {\n        dispatch(request());\n\n        sellerService.register(seller,remember)\n            .then(\n                seller => { \n                    dispatch(success(seller));\n                    history.push('/seller/dashboard');\n\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: sellerConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: sellerConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: sellerConstants.REGISTER_FAILURE, error } }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}