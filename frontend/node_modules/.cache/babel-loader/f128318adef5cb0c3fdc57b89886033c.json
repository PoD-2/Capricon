{"ast":null,"code":"var _jsxFileName = \"/Users/santhosh/myFiles/Capricon/src/components/ProductUpload/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { Col, Button, Modal, Form, ProgressBar } from 'react-bootstrap';\nimport { formValidation as validate } from '../../services';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sellerService } from '../../services';\nimport { alertActions } from '../../redux/actions/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProductUpload(props) {\n  _s();\n\n  //states\n  const [productName, setProductName] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [color, setColor] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [quantity, setQuanity] = useState(\"\");\n  const [productImages, setProductImages] = useState([]);\n  const [submitted, setSubmitted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const dispatch = useDispatch(); //reference to input type file\n\n  const fileInputRef = useRef();\n  const sellerId = useSelector(state => state.sellerAuth.seller.sellerId); //form validation\n\n  function productNameValidation() {\n    return validate.nameValidation(submitted, productName);\n  }\n\n  function categoryValidation() {\n    return validate.nameValidation(submitted, category);\n  }\n\n  function colorValidation() {\n    return validate.nameValidation(submitted, color);\n  }\n\n  function descriptionValidation() {\n    return validate.nameValidation(submitted, description);\n  }\n\n  function priceValidation() {\n    return validate.checkOnlyNumber(submitted, price);\n  }\n\n  function quantityValidation() {\n    return validate.checkOnlyNumber(submitted, quantity);\n  }\n\n  function productImagesValidation() {\n    return validate.productImageValidation(submitted, productImages);\n  }\n\n  function checkAllValidity() {\n    if (productNameValidation() && categoryValidation() && colorValidation() && descriptionValidation() && priceValidation() && quantityValidation() && productImagesValidation()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const hideModal = () => {\n    props.closeModal();\n  }; //handles the submit \n\n\n  const handleProductSubmit = () => {\n    setSubmitted(true);\n\n    if (submitted && checkAllValidity()) {\n      setIsLoading(true);\n      var fd = new FormData();\n      fd.append('productName', productName);\n      fd.append('category', category);\n      fd.append('color', color);\n      fd.append('price', price);\n      fd.append('qty', quantity);\n      fd.append('descr', description);\n      fd.append('file', productImages);\n      sellerService.addProduct(fd, sellerId, setProgress).then(res => {\n        console.log(res);\n        setIsLoading(false);\n        hideModal();\n        dispatch(alertActions.success(\"product added successfully\"));\n      }, error => {\n        console.log(error);\n        setIsLoading(false);\n        hideModal();\n        dispatch(alertActions.error(error.toString()));\n      });\n    }\n  }; //to handle image upload\n\n\n  const imageFileHandler = e => {\n    setProductImages(e.target.files);\n    console.log(e.target.files);\n  }; //to display images in modal\n\n\n  const createImageArray = () => {\n    let imageArray = [];\n\n    for (let i = 0; i < productImages.length; i++) {\n      let url = window.URL.createObjectURL(productImages[i]);\n      imageArray.push( /*#__PURE__*/_jsxDEV(\"img\", {\n        src: url,\n        width: 100,\n        height: 100,\n        className: \"mx-2\",\n        alt: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }, this));\n    }\n\n    return imageArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: props.showModal,\n    onHide: hideModal,\n    size: \"lg\",\n    backdrop: \"static\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Add product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        className: \"mb-3\",\n        striped: true,\n        variant: \"success\",\n        now: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 6,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              autoFocus: true,\n              type: \"text\",\n              value: productName,\n              placeholder: \"Product full name\",\n              className: 'form-control' + (!productNameValidation() && ' is-invalid'),\n              onChange: e => setProductName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), !productNameValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product Name is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 6,\n            controlId: \"formGridCompanyName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: category,\n              placeholder: \"Product category like gadgets, cosmetics etc\",\n              className: 'form-control' + (!categoryValidation() && ' is-invalid'),\n              onChange: e => setCategory(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), !categoryValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Category is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 12,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: description,\n              placeholder: \"About this product\",\n              className: 'form-control' + (!descriptionValidation() && ' is-invalid'),\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), !descriptionValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product description is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 4,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: price,\n              placeholder: \"Product price in INR\",\n              className: 'form-control' + (!priceValidation() && ' is-invalid'),\n              onChange: e => setPrice(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this), !priceValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product Price is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 4,\n            controlId: \"formGridCompanyName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              value: quantity,\n              placeholder: \"No of products you currently have\",\n              className: 'form-control' + (!quantityValidation() && ' is-invalid'),\n              onChange: e => setQuanity(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this), !quantityValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Quantity is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            md: 4,\n            controlId: \"formGridName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: color,\n              placeholder: \"eg black, blue etc\",\n              className: 'form-control' + (!colorValidation() && ' is-invalid'),\n              onChange: e => setColor(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 29\n            }, this), !colorValidation() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Product color is required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInput => fileInputRef.current = fileInput,\n        className: \"d-none\",\n        type: \"file\",\n        multiple: true,\n        onChange: imageFileHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Product images: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), !productImagesValidation() && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: \"Maximum 4 is allowed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => fileInputRef.current.click(),\n        className: \"d-flex rounded align-items-center justify-content-center\",\n        style: {\n          backgroundColor: \"rgba(112, 112, 112, 0.1)\",\n          height: 200,\n          cursor: \"pointer\"\n        },\n        children: \"Select maximum 4 images to upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), productImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mt-2 rounded\",\n        style: {\n          backgroundColor: \"rgba(112, 112, 112, 0.1)\"\n        },\n        children: createImageArray()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: hideModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleProductSubmit,\n        disabled: isLoading ? true : false,\n        children: \"Add product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProductUpload, \"BAKs3efdKiBGbFWp2CHTDE+ls7Y=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ProductUpload;\nexport default ProductUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductUpload\");","map":{"version":3,"sources":["/Users/santhosh/myFiles/Capricon/src/components/ProductUpload/index.js"],"names":["React","useState","useRef","Col","Button","Modal","Form","ProgressBar","formValidation","validate","useDispatch","useSelector","sellerService","alertActions","ProductUpload","props","productName","setProductName","category","setCategory","color","setColor","description","setDescription","price","setPrice","quantity","setQuanity","productImages","setProductImages","submitted","setSubmitted","isLoading","setIsLoading","progress","setProgress","dispatch","fileInputRef","sellerId","state","sellerAuth","seller","productNameValidation","nameValidation","categoryValidation","colorValidation","descriptionValidation","priceValidation","checkOnlyNumber","quantityValidation","productImagesValidation","productImageValidation","checkAllValidity","hideModal","closeModal","handleProductSubmit","fd","FormData","append","addProduct","then","res","console","log","success","error","toString","imageFileHandler","e","target","files","createImageArray","imageArray","i","length","url","window","URL","createObjectURL","push","showModal","value","fileInput","current","click","backgroundColor","height","cursor"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { Col, Button, Modal, Form, ProgressBar } from 'react-bootstrap';\nimport { formValidation as validate } from '../../services';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {sellerService} from '../../services';\nimport { alertActions } from '../../redux/actions/';\n\nfunction ProductUpload(props) {\n\n    //states\n    const [productName, setProductName] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [color, setColor] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [quantity, setQuanity] = useState(\"\");\n    const [productImages, setProductImages] = useState([]);\n    const [submitted, setSubmitted] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const dispatch = useDispatch();\n\n    //reference to input type file\n    const fileInputRef = useRef();\n\n    const sellerId = useSelector(state => state.sellerAuth.seller.sellerId);\n\n\n\n\n    //form validation\n\n    function productNameValidation() {\n        return validate.nameValidation(submitted, productName);\n    }\n\n    function categoryValidation() {\n        return validate.nameValidation(submitted, category);\n    }\n\n    function colorValidation() {\n        return validate.nameValidation(submitted, color);\n    }\n\n    function descriptionValidation() {\n        return validate.nameValidation(submitted, description);\n    }\n\n    function priceValidation() {\n        return validate.checkOnlyNumber(submitted, price);\n    }\n\n    function quantityValidation() {\n        return validate.checkOnlyNumber(submitted, quantity);\n    }\n\n    function productImagesValidation() {\n        return validate.productImageValidation(submitted, productImages);\n    }\n\n    function checkAllValidity() {\n        if (productNameValidation() && categoryValidation() && colorValidation() && descriptionValidation()\n            && priceValidation() && quantityValidation() && productImagesValidation()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n\n\n    const hideModal = () => {\n        props.closeModal();\n    }\n\n\n    //handles the submit \n    const handleProductSubmit = () => {\n        setSubmitted(true);\n        \n        if (submitted && checkAllValidity()) {\n            setIsLoading(true);\n            var fd = new FormData();\n            fd.append('productName', productName);\n            fd.append('category', category);\n            fd.append('color', color);\n            fd.append('price', price);\n            fd.append('qty', quantity);\n            fd.append('descr', description);\n            fd.append('file', productImages);\n\n            sellerService.addProduct(fd, sellerId, setProgress)\n            .then(\n                res => { \n                        console.log(res);\n                        setIsLoading(false);\n                        hideModal();\n                        dispatch(alertActions.success(\"product added successfully\"));\n                   \n                },\n                error => {\n                    console.log(error);\n                    setIsLoading(false);\n                    hideModal();\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n            \n\n        }\n\n        \n    }\n\n\n    //to handle image upload\n    const imageFileHandler = (e) => {\n        setProductImages(e.target.files);\n        console.log(e.target.files);\n    }\n\n\n    //to display images in modal\n    const createImageArray = () => {\n\n        let imageArray = [];\n\n        for (let i = 0; i < productImages.length; i++) {\n            let url = window.URL.createObjectURL(productImages[i]);\n            imageArray.push(<img src={url} width={100} height={100} className=\"mx-2\" alt=\"...\" />);\n        }\n\n        return imageArray;\n    }\n\n\n\n\n\n    return (\n        <Modal\n            show={props.showModal}\n            onHide={hideModal}\n            size=\"lg\"\n            backdrop=\"static\"\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Add product</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <ProgressBar className=\"mb-3\" striped variant=\"success\" now={progress} />\n                <Form>\n                    <Form.Row>\n                        <Form.Group as={Col} md={6} controlId=\"formGridName\">\n                            <Form.Label>Product Name</Form.Label>\n                            <Form.Control\n                                autoFocus\n                                type=\"text\"\n                                value={productName}\n                                placeholder=\"Product full name\"\n                                className={'form-control' + (!productNameValidation() && ' is-invalid')}\n                                onChange={(e) => setProductName(e.target.value)}\n                            />\n                            {!productNameValidation() &&\n                                <div className=\"invalid-feedback\">Product Name is required</div>\n                            }\n\n                        </Form.Group>\n                        <Form.Group as={Col} md={6} controlId=\"formGridCompanyName\">\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value={category}\n                                placeholder=\"Product category like gadgets, cosmetics etc\"\n                                className={'form-control' + (!categoryValidation() && ' is-invalid')}\n                                onChange={(e) => setCategory(e.target.value)}\n                            />\n                            {!categoryValidation() &&\n                                <div className=\"invalid-feedback\">Category is required</div>\n                            }\n\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} md={12} controlId=\"formGridName\">\n                            <Form.Label>Product description</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value={description}\n                                placeholder=\"About this product\"\n                                className={'form-control' + (!descriptionValidation() && ' is-invalid')}\n                                onChange={(e) => setDescription(e.target.value)}\n                            />\n                            {!descriptionValidation() &&\n                                <div className=\"invalid-feedback\">Product description is required</div>\n                            }\n\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} md={4} controlId=\"formGridName\">\n                            <Form.Label>Price</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value={price}\n                                placeholder=\"Product price in INR\"\n                                className={'form-control' + (!priceValidation() && ' is-invalid')}\n                                onChange={(e) => setPrice(e.target.value)}\n                            />\n                            {!priceValidation() &&\n                                <div className=\"invalid-feedback\">Product Price is required</div>\n                            }\n\n                        </Form.Group>\n                        <Form.Group as={Col} md={4} controlId=\"formGridCompanyName\">\n                            <Form.Label>quantity</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                value={quantity}\n                                placeholder=\"No of products you currently have\"\n                                className={'form-control' + (!quantityValidation() && ' is-invalid')}\n                                onChange={(e) => setQuanity(e.target.value)}\n                            />\n                            {!quantityValidation() &&\n                                <div className=\"invalid-feedback\">Quantity is required</div>\n                            }\n\n                        </Form.Group>\n                        <Form.Group as={Col} md={4} controlId=\"formGridName\">\n                            <Form.Label>Product Color</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value={color}\n                                placeholder=\"eg black, blue etc\"\n                                className={'form-control' + (!colorValidation() && ' is-invalid')}\n                                onChange={(e) => setColor(e.target.value)}\n                            />\n                            {!colorValidation() &&\n                                <div className=\"invalid-feedback\">Product color is required</div>\n                            }\n\n                        </Form.Group>\n                    </Form.Row>\n\n                </Form>\n                <input ref={fileInput => fileInputRef.current = fileInput} className=\"d-none\" type=\"file\" multiple onChange={imageFileHandler} />\n                <Form.Label>Product images: </Form.Label>\n                {!productImagesValidation() &&\n                    <p className=\"text-danger\">Maximum 4 is allowed</p>\n                }\n                <div onClick={() => fileInputRef.current.click()} className=\"d-flex rounded align-items-center justify-content-center\" style={{ backgroundColor: \"rgba(112, 112, 112, 0.1)\", height: 200, cursor: \"pointer\" }}>\n                    Select maximum 4 images to upload\n                </div>\n                {productImages.length > 0 && (\n                    <div className=\"p-3 mt-2 rounded\" style={{ backgroundColor: \"rgba(112, 112, 112, 0.1)\" }}>\n                        {createImageArray()}\n                    </div>\n                )\n                }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hideModal}>Close</Button>\n                <Button variant=\"primary\" onClick={handleProductSubmit} disabled={isLoading ? true : false}>Add product</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default ProductUpload\n"]},"metadata":{},"sourceType":"module"}